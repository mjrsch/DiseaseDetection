from PyQt5 import QtGui
from PyQt5.QtWidgets import QApplication, QDialog,QTabWidget, QGroupBox, QComboBox ,QVBoxLayout, QGridLayout, QWidget, QLabel, QLineEdit
import sys
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QPushButton
from WinsconsinDS import *
from CoimbraDS import  *


class TestView(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("MedHelper")
        self.setWindowIcon(QIcon("logo.jpg"))
        self.setFixedSize(500,670)
        vbox = QVBoxLayout()
        tabWidget = QTabWidget()
        tabWidget.setFont(QtGui.QFont("Sanserif", 10))
        tabWidget.addTab(TabWinsconsinDS(), "Wisconsin Data Set")
        tabWidget.addTab(TabCoimbraDS(), "Coimbra Data Set")
        vbox.addWidget(tabWidget)
        self.setLayout(vbox)
    
 
class TabWinsconsinDS(QWidget):
    def __init__(self):
        super().__init__()
        self.algorithms= QComboBox(self)
        self.algorithms.addItems(["Naive-Bayes Classifier" , "SVC Classifier", "K-Neighbours Classifier", "Decision Tree Classifier","Random Forest Classifier"])
        self.radiusMeanLabel = QLabel("Radius Mean: ")
        self.radiusMeanInput = QLineEdit(self)
        self.perimeterMeanLabel = QLabel("Perimeter Mean: ")
        self.perimeterMeanInput = QLineEdit(self)
        self.areaMeanLabel = QLabel("Area Mean: ")
        self.areaMeanInput = QLineEdit(self)
        self.concavityMeanLabel = QLabel("Concavity Mean: ")
        self.concavityMeanInput = QLineEdit(self)
        self.concavePointsMeanLabel = QLabel("Concave points mean:")
        self.concavePointsMeanInput = QLineEdit()
        self.radiusWorstLabel = QLabel("Radius Worst:")
        self.radiusWorstInput = QLineEdit()
        self.perimeterWorstLabel = QLabel("Perimeter Worst:")
        self.perimeterWorstInput = QLineEdit()
        self.areaWorstLabel = QLabel("Area Worst: ")
        self.areaWorstInput = QLineEdit(self)
        self.concavePointsWorstLabel = QLabel("Concave Points Worst:")
        self.concavePointsWorstInput = QLineEdit()
        self.diagnosisLabel = QLabel("Diagnosis:")
        self.diagnosisInput = QLineEdit()
        self.predictBtn = QPushButton('Diagnose', self)
        self.predictBtn.clicked.connect(self.predictBasedOnWisconsinTraining)
        self.predictBtn.setToolTip('Make diagnosis')
        self.backBtn = QPushButton('Back', self)
        self.backBtn.clicked.connect(self.goBack)
        self.backBtn.setToolTip('Go back to main menu')
        self.nbAccuracyLabel = QLabel("Naive Bayes Accuracy: ")
        self.nbAccuracyInput = QLineEdit(self)
        self.svmAccuracyLabel = QLabel("SVM Accuracy: ")
        self.svmAccuracyInput = QLineEdit(self)
        self.knAccuracyLabel = QLabel("K-Neigbors Accuracy: ")
        self.knAccuracyInput = QLineEdit(self)
        self.dtAccuracyLabel = QLabel("Decision Tree Accuracy: ")
        self.dtAccuracyInput = QLineEdit(self)
        self.rfAccuracyLabel = QLabel("Random Forest Accuracy: ")
        self.rfAccuracyInput = QLineEdit(self)
        
        
        vbox = QVBoxLayout()
        self.horizontalGroupBox = QGroupBox("Inputs and Metrics")
        grid=QGridLayout()
        grid.addWidget(self.radiusMeanLabel,0,0)
        grid.addWidget(self.radiusMeanInput,1,0 )
        grid.addWidget(self.nbAccuracyLabel,0,2)
        grid.addWidget(self.nbAccuracyInput,1,2)
        grid.addWidget(self.perimeterMeanLabel,2,0)
        grid.addWidget(self.perimeterMeanInput,3,0)
        grid.addWidget(self.svmAccuracyLabel,2,2)
        grid.addWidget(self.svmAccuracyInput,3,2)
        grid.addWidget(self.areaMeanLabel,4,0)
        grid.addWidget(self.areaMeanInput,5,0)
        grid.addWidget(self.knAccuracyLabel,4,2)
        grid.addWidget(self.knAccuracyInput,5,2)
        grid.addWidget(self.concavityMeanLabel,6,0)
        grid.addWidget(self.concavityMeanInput,7,0)
        grid.addWidget(self.dtAccuracyLabel,6,2)
        grid.addWidget(self.dtAccuracyInput,7,2)
        grid.addWidget(self.concavePointsMeanLabel,8,0)
        grid.addWidget(self.concavePointsMeanInput,9,0)
        grid.addWidget(self.rfAccuracyLabel,8,2)
        grid.addWidget(self.rfAccuracyInput,9,2)
        grid.addWidget(self.radiusWorstLabel,10,0)
        grid.addWidget(self.radiusWorstInput,11,0)
        grid.addWidget(self.perimeterWorstLabel,12,0)
        grid.addWidget(self.perimeterWorstInput,13,0)
        grid.addWidget(self.areaWorstLabel,14,0)
        grid.addWidget(self.areaWorstInput,15,0)
        grid.addWidget(self.concavePointsWorstLabel,16,0)
        grid.addWidget(self.concavePointsWorstInput,17,0)
        grid.addWidget(self.diagnosisLabel,18,0)
        grid.addWidget(self.diagnosisInput,19,0)
        self.horizontalGroupBox.setLayout(grid)
    
        
        vbox.addWidget(self.algorithms)
        vbox.addWidget(self.horizontalGroupBox)
        vbox.addWidget(self.predictBtn)
        vbox.addWidget(self.backBtn)
        self.setLayout(vbox)
    def predictBasedOnWisconsinTraining(self):
            radiusMeanVar = float(self.radiusMeanInput.text())
            perimeterMeanVar = float(self.perimeterMeanInput.text())
            areaMeanVar = float(self.areaMeanInput.text())
            concavityMeanVar = float(self.concavityMeanInput.text())
            concavePointsMeanVar = float(self.concavePointsMeanInput.text())
            radiusWorstVar= float(self.radiusWorstInput.text())
            perimeterWorstVar = float(self.perimeterWorstInput.text())
            areaWorstVar = float(self.areaWorstInput.text())
            concavePointsWorstVar = float(self.concavePointsWorstInput.text())
            valuesForPrediction = []
            valuesForPrediction.append(radiusMeanVar)
            valuesForPrediction.append(perimeterMeanVar)
            valuesForPrediction.append(areaMeanVar)
            valuesForPrediction.append(concavityMeanVar)
            valuesForPrediction.append(concavePointsMeanVar)
            valuesForPrediction.append(radiusWorstVar)
            valuesForPrediction.append(perimeterWorstVar)
            valuesForPrediction.append(areaWorstVar)
            valuesForPrediction.append(concavePointsWorstVar)
            toBePredicted=[]
            toBePredicted.append(valuesForPrediction)
            if self.algorithms.currentText()=='Naive-Bayes Classifier':
                diag=naiveBayesWinsconsin().predict(toBePredicted)
                self.nbAccuracyInput.setText(str(getNaiveBayesWinsconsinAccuracy()))
                print('Using the Naive-Bayes Classifier for the values: ' , valuesForPrediction)
            elif self.algorithms.currentText()=='SVC Classifier':
                diag=supportVectorMachinesWinsconsin().predict(toBePredicted)
                self.svmAccuracyInput.setText(str(getSupportVectorMachinesWinsconsinAccuracy()))
                print('Using the SVC Classifier for the values: ' , valuesForPrediction)
            elif self.algorithms.currentText()=='K-Neighbours Classifier':
                diag=kNearestNeigborWinsconsin().predict(toBePredicted)
                self.knAccuracyInput.setText(str(getKNearestNeigborWinsconsinAccuracy()))
                print('Using the K-Neighbours Classifier for the values: ' , valuesForPrediction)
            elif self.algorithms.currentText()=='Decision Tree Classifier':
                diag=decisionTreeWinsconsin().predict(toBePredicted)
                self.dtAccuracyInput.setText(str(getDecisionTreeWinsconsinAccuracy()))
                print('Using the Decision Tree Classifier for the values: ' , valuesForPrediction)
            elif self.algorithms.currentText()=='Random Forest Classifier':
                diag=randomForestWinsconsin().predict(toBePredicted)
                self.rfAccuracyInput.setText(str(getRandomForestWinsconsinAccuracy()))
                print('Using the Random Forest Classifier for the values: ' , valuesForPrediction)
                
            if diag =='M':
                diagnosisLabel='Malign'
            else:
                diagnosisLabel='Benign'
            self.diagnosisInput.setText(diagnosisLabel)
            
    def goBack(self):
        self.MM = MainWindow()
        self.MM.show()
        self.close()
        
 
class TabCoimbraDS(QWidget):
    def __init__(self):
        super().__init__()
        self.algorithmsCoimbra= QComboBox(self)
        self.algorithmsCoimbra.addItems(["Naive-Bayes Classifier" , "SVC Classifier", "K-Neighbours Classifier", "Decision Tree Classifier","Random Forest Classifier"])
        self.ageLabel = QLabel("Age: ")
        self.ageInput = QLineEdit(self)
        self.bmiLabel = QLabel("BMI: ")
        self.bmiInput = QLineEdit(self)
        self.glucoseLabel = QLabel("Glucose:")
        self.glucoseInput = QLineEdit()
        self.insulinLabel = QLabel("Insulin:")
        self.insulinInput = QLineEdit()
        self.homaLabel = QLabel("HOMA:")
        self.homaInput = QLineEdit()
        self.leptinLabel = QLabel("Leptin:")
        self.leptinInput = QLineEdit()
        self.adiponectinLabel = QLabel("Adiponectin:")
        self.adiponectinInput = QLineEdit()
        self.resistinLabel = QLabel("Resistin:")
        self.resistinInput = QLineEdit()
        self.mcpLabel = QLabel("MCP.1:")
        self.mcpInput = QLineEdit()
        self.diagnosisLabel = QLabel("Diagnosis:")
        self.diagnosisInput = QLineEdit()
        self.predictBtn = QPushButton('Diagnose', self)
        self.predictBtn.clicked.connect(self.predictBasedOnCoimbraTraining)
        self.predictBtn.setToolTip('Make diagnosis')
        self.backBtn = QPushButton('Back', self)
        self.backBtn.clicked.connect(self.goBack)
        self.backBtn.setToolTip('Go back to main menu')
        self.nbAccuracyCoimbraLabel = QLabel("Naive Bayes Accuracy: ")
        self.nbAccuracyCoimbraInput = QLineEdit(self)
        self.svmAccuracyCoimbraLabel = QLabel("SVM Accuracy: ")
        self.svmAccuracyCoimbraInput = QLineEdit(self)
        self.knAccuracyCoimbraLabel = QLabel("K-Neigbors Accuracy: ")
        self.knAccuracyCoimbraInput = QLineEdit(self)
        self.dtAccuracyCoimbraLabel = QLabel("Decision Tree Accuracy: ")
        self.dtAccuracyCoimbraInput = QLineEdit(self)
        self.rfAccuracyCoimbraLabel = QLabel("Random Forest Accuracy: ")
        self.rfAccuracyCoimbraInput = QLineEdit(self)
        
        
        vboxCoimbra = QVBoxLayout()
        self.horizontalGroupBoxCoimbra = QGroupBox("Inputs and Metrics")
        gridCoimbra=QGridLayout()
        gridCoimbra.addWidget(self.ageLabel,0,0)
        gridCoimbra.addWidget(self.ageInput,1,0)
        gridCoimbra.addWidget(self.nbAccuracyCoimbraLabel,0,2)
        gridCoimbra.addWidget(self.nbAccuracyCoimbraInput,1,2)
        gridCoimbra.addWidget(self.bmiLabel,2,0)
        gridCoimbra.addWidget(self.bmiInput,3,0)
        gridCoimbra.addWidget(self.svmAccuracyCoimbraLabel,2,2)
        gridCoimbra.addWidget(self.svmAccuracyCoimbraInput,3,2)
        gridCoimbra.addWidget(self.glucoseLabel,4,0)
        gridCoimbra.addWidget(self.glucoseInput,5,0)
        gridCoimbra.addWidget(self.knAccuracyCoimbraLabel,4,2)
        gridCoimbra.addWidget(self.knAccuracyCoimbraInput,5,2)
        gridCoimbra.addWidget(self.insulinLabel,6,0)
        gridCoimbra.addWidget(self.insulinInput,7,0)
        gridCoimbra.addWidget(self.dtAccuracyCoimbraLabel,6,2)
        gridCoimbra.addWidget(self.dtAccuracyCoimbraInput,7,2)
        gridCoimbra.addWidget(self.homaLabel,8,0)
        gridCoimbra.addWidget(self.homaInput,9,0)
        gridCoimbra.addWidget(self.rfAccuracyCoimbraLabel,8,2)
        gridCoimbra.addWidget(self.rfAccuracyCoimbraInput,9,2)
        gridCoimbra.addWidget(self.leptinLabel,10,0)
        gridCoimbra.addWidget(self.leptinInput,11,0)
        gridCoimbra.addWidget(self.adiponectinLabel,12,0)
        gridCoimbra.addWidget(self.adiponectinInput,13,0)
        gridCoimbra.addWidget(self.resistinLabel,14,0)
        gridCoimbra.addWidget(self.resistinInput,15,0)
        gridCoimbra.addWidget(self.mcpLabel,16,0)
        gridCoimbra.addWidget(self.mcpInput,17,0)
        gridCoimbra.addWidget(self.diagnosisLabel,18,0)
        gridCoimbra.addWidget(self.diagnosisInput,19,0)
        self.horizontalGroupBoxCoimbra.setLayout(gridCoimbra)
        
        
        vboxCoimbra.addWidget(self.algorithmsCoimbra)
        vboxCoimbra.addWidget(self.horizontalGroupBoxCoimbra)
        vboxCoimbra.addWidget(self.predictBtn)
        vboxCoimbra.addWidget(self.backBtn)
        self.setLayout(vboxCoimbra)
    def predictBasedOnCoimbraTraining(self):
            ageVar = float(self.ageInput.text())
            bmiVar = float(self.bmiInput.text())
            glucoseVar = float(self.glucoseInput.text())
            insulinVar= float(self.insulinInput.text())
            homaVar = float(self.homaInput.text())
            leptinVar = float(self.leptinInput.text())
            adiponectinVar = float(self.adiponectinInput.text())
            resistinVar = float(self.resistinInput.text())
            mcpVar = float(self.mcpInput.text())
            valuesForPrediction = []
            valuesForPrediction.append(ageVar)
            valuesForPrediction.append(bmiVar)
            valuesForPrediction.append(glucoseVar)
            valuesForPrediction.append(insulinVar)
            valuesForPrediction.append(homaVar)
            valuesForPrediction.append(leptinVar)
            valuesForPrediction.append(adiponectinVar)
            valuesForPrediction.append(resistinVar)
            valuesForPrediction.append(mcpVar)
            toBePredicted=[]
            toBePredicted.append(valuesForPrediction)
            if self.algorithmsCoimbra.currentText()=='Naive-Bayes Classifier':
                diag=naiveBayesCoimbra().predict(toBePredicted)
                self.nbAccuracyCoimbraInput.setText(str(getNaiveBayesCoimbraAccuracy()))
                print(diag)
                print('Using the Naive-Bayes Classifier for the values: ' , valuesForPrediction)
            elif self.algorithmsCoimbra.currentText()=='SVC Classifier':
                diag=supportVectorMachinesCoimbra().predict(toBePredicted)
                self.svmAccuracyCoimbraInput.setText(str(getSupportVectorMachinesCoimbraAccuracy()))
                print('Using the SVC Classifier for the values: ' , valuesForPrediction)
            elif self.algorithmsCoimbra.currentText()=='K-Neighbours Classifier':
                diag=kNearestNeigborCoimbra().predict(toBePredicted)
                self.knAccuracyCoimbraInput.setText(str(getKNearestNeigborCoimbraAccuracy()))
                print('Using the K-Neighbours Classifier for the values: ' , valuesForPrediction)
            elif self.algorithmsCoimbra.currentText()=='Decision Tree Classifier':
                diag=decisionTreeCoimbra().predict(toBePredicted)
                self.dtAccuracyCoimbraInput.setText(str(getDecisionTreeCoimbraAccuracy()))
                print('Using the Decision Tree Classifier for the values: ' , valuesForPrediction)
            elif self.algorithmsCoimbra.currentText()=='Random Forest Classifier':
                diag=randomForestCoimbra().predict(toBePredicted)
                self.rfAccuracyCoimbraInput.setText(str(getRandomForestCoimbraAccuracy()))
                print('Using the Random Forest Classifier for the values: ' , valuesForPrediction)
            
            if diag==1:
                diagnosisLabel='Healthy'
            elif diag==2:
                diagnosisLabel='Cancer'
                

            self.diagnosisInput.setText(diagnosisLabel)
    def goBack(self):
        self.MM = MainWindow()
        self.MM.show()
        self.close()
            

#########################################################################    
class CabinetView(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("MedHelper")
        self.setWindowIcon(QIcon("logo.jpg"))
        self.setFixedSize(500,670)
        vbox = QVBoxLayout()
        tabWidget = QTabWidget()
        tabWidget.setFont(QtGui.QFont("Sanserif", 10))
        tabWidget.addTab(TabBreastCancer(), "Breast Cancer")
        tabWidget.addTab(TabDiabetes(), "Diabetes")
        tabWidget.addTab(TabHeartDisease(), "Heart Disease")
        vbox.addWidget(tabWidget)
        self.setLayout(vbox)
        
class TabBreastCancer(QWidget):
    def __init__(self):
        super().__init__()
        self.radiusMeanLabel = QLabel("Radius Mean: ")
        self.radiusMeanInput = QLineEdit(self)
        self.perimeterMeanLabel = QLabel("Perimeter Mean: ")
        self.perimeterMeanInput = QLineEdit(self)
        self.areaMeanLabel = QLabel("Area Mean: ")
        self.areaMeanInput = QLineEdit(self)
        self.concavityMeanLabel = QLabel("Concavity Mean: ")
        self.concavityMeanInput = QLineEdit(self)
        self.concavePointsMeanLabel = QLabel("Concave points mean:")
        self.concavePointsMeanInput = QLineEdit()
        self.radiusWorstLabel = QLabel("Radius Worst:")
        self.radiusWorstInput = QLineEdit()
        self.perimeterWorstLabel = QLabel("Perimeter Worst:")
        self.perimeterWorstInput = QLineEdit()
        self.areaWorstLabel = QLabel("Area Worst: ")
        self.areaWorstInput = QLineEdit(self)
        self.concavePointsWorstLabel = QLabel("Concave Points Worst:")
        self.concavePointsWorstInput = QLineEdit()
        self.diagnosisLabel = QLabel("Diagnosis:")
        self.diagnosisInput = QLineEdit()
        self.predictBtn = QPushButton('Diagnose', self)
        self.predictBtn.clicked.connect(self.predict)
        self.predictBtn.setToolTip('Make diagnosis')
        self.backBtn = QPushButton('Back', self)
        self.backBtn.clicked.connect(self.goBack)
        self.backBtn.setToolTip('Go back to main menu')
        vbox = QVBoxLayout()
        vbox.addWidget(self.radiusMeanLabel)
        vbox.addWidget(self.radiusMeanInput)
        vbox.addWidget(self.perimeterMeanLabel)
        vbox.addWidget(self.perimeterMeanInput)
        vbox.addWidget(self.areaMeanLabel)
        vbox.addWidget(self.areaMeanInput)
        vbox.addWidget(self.concavityMeanLabel)
        vbox.addWidget(self.concavityMeanInput)
        vbox.addWidget(self.concavePointsMeanLabel)
        vbox.addWidget(self.concavePointsMeanInput)
        vbox.addWidget(self.radiusWorstLabel)
        vbox.addWidget(self.radiusWorstInput)
        vbox.addWidget(self.perimeterWorstLabel)
        vbox.addWidget(self.perimeterWorstInput)
        vbox.addWidget(self.areaWorstLabel)
        vbox.addWidget(self.areaWorstInput)
        vbox.addWidget(self.concavePointsWorstLabel)
        vbox.addWidget(self.concavePointsWorstInput)
        vbox.addWidget(self.diagnosisLabel)
        vbox.addWidget(self.diagnosisInput)
        vbox.addWidget(self.predictBtn)
        vbox.addWidget(self.backBtn)
        self.setLayout(vbox)
    def predict(self):
            radiusMeanVar = float(self.radiusMeanInput.text())
            perimeterMeanVar = float(self.perimeterMeanInput.text())
            areaMeanVar = float(self.areaMeanInput.text())
            concavityMeanVar = float(self.concavityMeanInput.text())
            concavePointsMeanVar = float(self.concavePointsMeanInput.text())
            radiusWorstVar= float(self.radiusWorstInput.text())
            perimeterWorstVar = float(self.perimeterWorstInput.text())
            areaWorstVar = float(self.areaWorstInput.text())
            concavePointsWorstVar = float(self.concavePointsWorstInput.text())
            valuesForPrediction = []
            valuesForPrediction.append(radiusMeanVar)
            valuesForPrediction.append(perimeterMeanVar)
            valuesForPrediction.append(areaMeanVar)
            valuesForPrediction.append(concavityMeanVar)
            valuesForPrediction.append(concavePointsMeanVar)
            valuesForPrediction.append(radiusWorstVar)
            valuesForPrediction.append(perimeterWorstVar)
            valuesForPrediction.append(areaWorstVar)
            valuesForPrediction.append(concavePointsWorstVar)
            toBePredicted=[]
            toBePredicted.append(valuesForPrediction)
            diag=randomForestWinsconsin.predict(toBePredicted)
                
            if diag =='M':
                diagnosisLabel='Malign'
            else:
                diagnosisLabel='Benign'
            self.diagnosisInput.setText(diagnosisLabel)
            
    def goBack(self):
        self.MM = MainWindow()
        self.MM.show()
        self.close()
            
class TabDiabetes(QWidget):
    def __init__(self):
        super().__init__()
        self.pregnanciesLabel = QLabel("Pregnancies: ")
        self.pregnanciesInput = QLineEdit(self)
        self.glucoseDiabetisLabel = QLabel("Glucose: ")
        self.glucoseDiabetisInput = QLineEdit(self)
        self.bloodPressureLabel = QLabel("Blood pressure: ")
        self.bloodPressureInput = QLineEdit(self)
        self.bosyMassIndexLabel = QLabel("Body mass index: ")
        self.bosyMassIndexInput = QLineEdit(self)
        self.diabetesPedigreeFctLabel = QLabel("Diabetes pedigree function:")
        self.diabetesPedigreeFctInput = QLineEdit()
        self.diagnosisLabel = QLabel("Diagnosis:")
        self.diagnosisInput = QLineEdit()
        self.predictBtn = QPushButton('Diagnose', self)
        self.predictBtn.clicked.connect(self.predictDiabetes)
        self.predictBtn.setToolTip('Make diagnosis')
        self.backBtn = QPushButton('Back', self)
        self.backBtn.clicked.connect(self.goBack)
        self.backBtn.setToolTip('Go back to main menu')
        vbox = QVBoxLayout()
        vbox.addWidget(self.pregnanciesLabel)
        vbox.addWidget(self.pregnanciesInput)
        vbox.addWidget(self.glucoseDiabetisLabel)
        vbox.addWidget(self.glucoseDiabetisInput)
        vbox.addWidget(self.bloodPressureLabel)
        vbox.addWidget(self.bloodPressureInput)
        vbox.addWidget(self.bosyMassIndexLabel)
        vbox.addWidget(self.bosyMassIndexInput)
        vbox.addWidget(self.diabetesPedigreeFctLabel)
        vbox.addWidget(self.diabetesPedigreeFctInput)
        vbox.addWidget(self.diagnosisLabel)
        vbox.addWidget(self.diagnosisInput)
        vbox.addWidget(self.predictBtn)
        vbox.addWidget(self.backBtn)
        self.setLayout(vbox)
    def predictDiabetes(self):
            print('Not implemented because not part of this app...')
    def goBack(self):
        self.MM = MainWindow()
        self.MM.show()
        self.close()
        
class TabHeartDisease(QWidget):
    def __init__(self):
        super().__init__()
        self.chestPainTypeLabel = QLabel("Chest pain type: ")
        self.chestPainTypeInput = QLineEdit(self)
        self.restingElectroCardioLabel = QLabel("Resting electrocardiographic:")
        self.restingElectroCardioInput = QLineEdit()
        self.exerciseInducedLabel = QLabel("Exercise induced angina:")
        self.exerciseInducedInput = QLineEdit()
        self.depressionInducedLabel = QLabel("Depression induced:")
        self.depressionInducedInput = QLineEdit()
        self.slopeExerciseLabel = QLabel("Slope of the peak exercise:")
        self.slopeExerciseInput = QLineEdit()
        self.nrMajorVesselsLabel = QLabel("Number of major vessels:")
        self.nrMajorVesselsInput = QLineEdit()
        self.diagnosisLabel = QLabel("Diagnosis:")
        self.diagnosisInput = QLineEdit()
        self.predictBtn = QPushButton('Diagnose', self)
        self.predictBtn.clicked.connect(self.predict)
        self.predictBtn.setToolTip('Make diagnosis')
        self.backBtn = QPushButton('Back', self)
        self.backBtn.clicked.connect(self.goBack)
        self.backBtn.setToolTip('Go back to main menu')
        vbox = QVBoxLayout()
        vbox.addWidget(self.chestPainTypeLabel)
        vbox.addWidget(self.chestPainTypeInput)
        vbox.addWidget(self.restingElectroCardioLabel)
        vbox.addWidget(self.restingElectroCardioInput)
        vbox.addWidget(self.exerciseInducedLabel)
        vbox.addWidget(self.exerciseInducedInput)
        vbox.addWidget(self.depressionInducedLabel)
        vbox.addWidget(self.depressionInducedInput)
        vbox.addWidget(self.slopeExerciseLabel)
        vbox.addWidget(self.slopeExerciseInput)
        vbox.addWidget(self.nrMajorVesselsLabel)
        vbox.addWidget(self.nrMajorVesselsInput)
        vbox.addWidget(self.diagnosisLabel)
        vbox.addWidget(self.diagnosisInput)
        vbox.addWidget(self.predictBtn)
        vbox.addWidget(self.backBtn)
        self.setLayout(vbox)
    def predict(self):
        print('Not implemented because not part of this app...')
    def goBack(self):
        self.MM = MainWindow()
        self.MM.show()
        self.close()            

class MainWindow(QDialog):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle("MedHelper")
        self.setWindowIcon(QIcon("logo.jpg"))
        self.setFixedSize(200,200)
        self.btnTestView = QPushButton('Open Test Perspective', self)
        self.btnTestView.clicked.connect(self.openTestView)
        self.btnCabinetView = QPushButton('Open Cabinet Perspective', self)
        self.btnCabinetView.clicked.connect(self.openCabinetView)
        vbox = QVBoxLayout()
        vbox.addWidget(self.btnTestView)
        vbox.addWidget(self.btnCabinetView)
        self.setLayout(vbox)
        

    def openTestView(self):
        self.TestView = TestView()
        self.TestView.show()
        self.close()
        
    def openCabinetView(self):
        self.CabinetView = CabinetView()
        self.CabinetView.show()
        self.close()
